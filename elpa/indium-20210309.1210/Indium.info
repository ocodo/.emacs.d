This is Indium.info, produced by makeinfo version 6.7 from Indium.texi.

     Indium 2.1.4, Jan 16, 2020

     Nicolas Petton

     Copyright © 2018, Nicolas Petton

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Indium: (Indium.info). JavaScript development environment for Emacs.
END-INFO-DIR-ENTRY


   Generated by Sphinx 2.1.2.


File: Indium.info,  Node: Top,  Next: Table of contents,  Up: (dir)

Indium Documentation
********************

     Indium 2.1.4, Jan 16, 2020

     Nicolas Petton

     Copyright © 2018, Nicolas Petton

Indium is a JavaScript development environment for Emacs(1).

Indium is Free Software, licensed under the GPL v3.0.  You can follow
its development on GitHub(2).

Indium connects to a browser tab or nodejs process and provides several
features for JavaScript development, including:

   * a REPL (with auto completion) & object inspection;

   * an inspector, with history and navigation;

   * a scratch buffer (‘M-x indium-scratch’);

   * JavaScript evaluation in JS buffers with ‘indium-interaction-mode’;

   * a stepping Debugger, similar to ‘edebug’, or ‘cider’.

This documentation can be read online at ‘https://indium.readthedocs.io’
and in Info format (within Emacs with ‘(info "Indium")’).

It is also available in Info format and can be consulted from within
Emacs with ‘C-h i m indium RET’.

* Menu:

* Table of contents::
* Indices and tables::

 — The Detailed Node Listing —

Table of contents

* Installation::
* Getting up and running::
* The REPL::
* Interaction in JS buffers::
* The stepping debugger::
* The inspector::
* Troubleshooting::

Installation

* The Indium server::
* Using MELPA::
* Manual installation::

Getting up and running

* Project configuration::
* General configuration::
* Chrome/Chromium configuration options::
* NodeJS configuration options::
* Starting Indium::
* NodeJS requirements::
* Chrome/Chromium requirements::

The REPL

* Starting a REPL::
* Using the REPL::
* Code evaluation & context::

Using the REPL

* Keybindings::
* Reconnecting from the REPL buffer::

Interaction in JS buffers

* Evaluating and inspecting::
* Switching to the REPL buffer::
* Adding and removing breakpoints::

The stepping debugger

* Using sourcemaps::
* Blackboxing scripts::

Using sourcemaps

* Overriding sourcemap paths::
* Setting a different remote root (NodeJS): Setting a different remote root NodeJS.

The inspector

* Using the inspector::

Troubleshooting

* General advice before reporting issues::
* The Indium server doesn’t start::
* Breakpoints are not set (not using sourcemaps): Breakpoints are not set not using sourcemaps.
* Breakpoints and debugging do not work (using sourcemaps): Breakpoints and debugging do not work using sourcemaps.


   ---------- Footnotes ----------

   (1) http://gnu.org/software/emacs

   (2) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Table of contents,  Next: Indices and tables,  Prev: Top,  Up: Top

1 Table of contents
*******************

* Menu:

* Installation::
* Getting up and running::
* The REPL::
* Interaction in JS buffers::
* The stepping debugger::
* The inspector::
* Troubleshooting::


File: Indium.info,  Node: Installation,  Next: Getting up and running,  Up: Table of contents

1.1 Installation
================

     Note: If you already have installed ‘Jade’, you should read the
     migration-from-jade page first.

Indium supports ‘Emacs 25.3+’, works with ‘Chrome’ (debugging protocol
‘v1.2’, see *note Chrome/Chromium requirements: 5.) and ‘NodeJS’, see
*note NodeJS requirements: 6.

Indium works with ‘js-mode’, ‘js2-mode’, ‘js2-jsx-mode’ and ‘rjsx-mode’.
It supports the ECMAScript features of the runtime it connects to.

Indium is available on MELPA(1), MELPA Stable(2).

* Menu:

* The Indium server::
* Using MELPA::
* Manual installation::

   ---------- Footnotes ----------

   (1) https://melpa.org

   (2) https://stable.melpa/org


File: Indium.info,  Node: The Indium server,  Next: Using MELPA,  Up: Installation

1.1.1 The Indium server
-----------------------

Indium needs to communicate with a small server for evaluation and
debugging.  Install the server with the following command (prepend
‘sudo’ on GNU/Linux):

     npm install -g indium


File: Indium.info,  Node: Using MELPA,  Next: Manual installation,  Prev: The Indium server,  Up: Installation

1.1.2 Using MELPA
-----------------

Unless you are already using MELPA, you will have to setup ‘package.el’
to use MELPA or MELPA Stable repositories.  You can follow this
documentation(1).

You can install Indium with the following command:

     M-x package-install [RET] indium [RET]

or by adding this bit of Emacs Lisp code to your Emacs initialization
file (‘.emacs’ or ‘init.el’):

     (unless (package-installed-p 'indium)
       (package-install 'indium))

If the installation doesn’t work try refreshing the package list:

     M-x package-refresh-contents [RET]

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: Indium.info,  Node: Manual installation,  Prev: Using MELPA,  Up: Installation

1.1.3 Manual installation
-------------------------

If you want to install Indium manually, make sure to install
‘websocket.el’.  Obtain the code of Indium from the repository(1).

Add the following to your Emacs configuration:

     ;; load Indium from its source code
     (add-to-list 'load-path "~/projects/indium")
     (require 'indium)

   ---------- Footnotes ----------

   (1) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Getting up and running,  Next: The REPL,  Prev: Installation,  Up: Table of contents

1.2 Getting up and running
==========================

* Menu:

* Project configuration::
* General configuration::
* Chrome/Chromium configuration options::
* NodeJS configuration options::
* Starting Indium::
* NodeJS requirements::
* Chrome/Chromium requirements::


File: Indium.info,  Node: Project configuration,  Next: General configuration,  Up: Getting up and running

1.2.1 Project configuration
---------------------------

Place a ‘.indium.json’ file in the root folder of your JavaScript
project.  The project file can contain one or many configurations
settings for NodeJS (see *note NodeJS configuration options: 10.) and
Chrome/Chromium (see *note Chrome/Chromium configuration options: 11.).

Here is a minimalist ‘.indium.json’ file.:

     {
       "configurations": [
         {
           "name": "Web project",
           "type": "chrome"
         }
       ]
     }


File: Indium.info,  Node: General configuration,  Next: Chrome/Chromium configuration options,  Prev: Project configuration,  Up: Getting up and running

1.2.2 General configuration
---------------------------

The ‘.indium.json’ file can contain as many configurations as needed,
and mix any supported configuration types.

The currently supported ‘type’ values are ‘"chrome"’ and ‘"node"’.

The root directory of the source files is by default set to the
directory where this ‘.indium.json’ file is placed, but it can be
overridden with the ‘root’ (or the ‘webRoot’ alias) option:

     {
       "configurations": [
         {
           "type": "chrome",
           "root": "src"
         }
       ]
     }

Custom sourcemap path overrides can be set with
‘sourceMapPathOverrides’.  See *note Using sourcemaps: 14. for more
information on sourcemaps and debugging.


File: Indium.info,  Node: Chrome/Chromium configuration options,  Next: NodeJS configuration options,  Prev: General configuration,  Up: Getting up and running

1.2.3 Chrome/Chromium configuration options
-------------------------------------------


host: Host on which Chrome is running (defaults to ‘"localhost"’).


port: Port on which Chrome is running (defaults to ‘9222’).


url: Url to open when running ‘indium-launch’.

Example configuration:

     {
       "configurations": [
         {
           "name": "Web project",
           "type": "chrome",
           "host": "192.168.22.1",
           "url": "http://192.168.22.1/myproject/index.html",
           "port": 9222
         }
       ]
     }


File: Indium.info,  Node: NodeJS configuration options,  Next: Starting Indium,  Prev: Chrome/Chromium configuration options,  Up: Getting up and running

1.2.4 NodeJS configuration options
----------------------------------


program: Nodejs program to start a new process.  The ‘--inspect’ flag
will be added automatically.  Expected type: string.


args: Arguments passed to the program to debug.  Expected type: string.


inspect-brk: Whether Indium should break at the first statement (false
by default).


host: Host on which the Node inspector is listening (defaults to
‘"localhost"’).


port: Port on which the Node inspector is listening (defaults to 9229).

Here is an example configuration for debugging Gulp tasks:

     {
       "configurations": [
         {
           "name": "Gulp",
           "type": "node",
           "program": "node",
           "args": "./node_modules/gulp/bin/gulp.js",
           "inspect-brk": true
         }
       ]
     }

When the NodeJS application runs on another computer (or inside a
container like Docker), a custom remote project root path can be set
with ‘remoteRoot’.  See *note Setting a different remote root (NodeJS):
17. for more information on script paths and debugging.


File: Indium.info,  Node: Starting Indium,  Next: NodeJS requirements,  Prev: NodeJS configuration options,  Up: Getting up and running

1.2.5 Starting Indium
---------------------

Indium can be started in two modes:

   - Connect: ‘M-x indium-connect’ Connect indium to a running runtime
     from one of the configurations in the ‘.indium.json’ project file.

   - Launch: ‘M-x indium-launch’ Start a JavaScript process (Chrome or
     NodeJS) as specified from the configurations in the ‘.indium.json’
     project file.


File: Indium.info,  Node: NodeJS requirements,  Next: Chrome/Chromium requirements,  Prev: Starting Indium,  Up: Getting up and running

1.2.6 NodeJS requirements
-------------------------

Nodejs >= ‘8.x’ is required for Indium to work.

If your distribution ships an old version of NodeJS, you can install a
more recent version using nvm(1):

     $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash

Once ‘nvm’ is install, you can easily install and use the version of
NodeJS you want:

     $ nvm install v8
     $ nvm alias default v8
     $ node --version

If you install NodeJS using ‘nvm’, chances are that Emacs won’t have it
in its ‘exec path’.  A simple solution is to use the excellent
exec-path-from-shell(2) package.

   ---------- Footnotes ----------

   (1) https://github.com/creationix/nvm

   (2) https://github.com/purcell/exec-path-from-shell


File: Indium.info,  Node: Chrome/Chromium requirements,  Prev: NodeJS requirements,  Up: Getting up and running

1.2.7 Chrome/Chromium requirements
----------------------------------

Chrome/Chromium >= ‘60.0’ is required for Indium to properly work
(debugging protocol ‘v1.2’).

When the variable ‘indium-chrome-use-temporary-profile’ is non-nil (the
default), ‘M-x indium-launch’ will start a new instance of
Chrome/Chromium with the remote debugging port set up.

Otherwise, you can start Chrome/Chromium with the
‘--remote-debugging-port’ flag like the following:

     chromium --remote-debugging-port=9222 https://localhost:3000

If you start Chrome manually, make sure that no instance of Chrome is
already running, otherwise Chrome will simply open a new tab on the
existing Chrome instance, and the ‘remote-debugging-port’ will not be
set.


File: Indium.info,  Node: The REPL,  Next: Interaction in JS buffers,  Prev: Getting up and running,  Up: Table of contents

1.3 The REPL
============

* Menu:

* Starting a REPL::
* Using the REPL::
* Code evaluation & context::


File: Indium.info,  Node: Starting a REPL,  Next: Using the REPL,  Up: The REPL

1.3.1 Starting a REPL
---------------------

A REPL (Read Eval Print Loop) buffer is automatically open when a new
Indium connection is made (see *note Getting up and running: d.).

[Indium-figures/repl]
The REPL offers the following features:

   * Auto completion with ‘company-mode’

   * JS syntax highlighting

   * Pretty printing and preview of printed values

   * Access to the object inspector (see *note The inspector: 20.)

[Indium-figures/repl2]

File: Indium.info,  Node: Using the REPL,  Next: Code evaluation & context,  Prev: Starting a REPL,  Up: The REPL

1.3.2 Using the REPL
--------------------

* Menu:

* Keybindings::
* Reconnecting from the REPL buffer::


File: Indium.info,  Node: Keybindings,  Next: Reconnecting from the REPL buffer,  Up: Using the REPL

1.3.2.1 Keybindings
...................

Here is the list of available keybindings in a REPL buffer:


File: Indium.info,  Node: Reconnecting from the REPL buffer,  Prev: Keybindings,  Up: Using the REPL

1.3.2.2 Reconnecting from the REPL buffer
.........................................

When a connection is closed (most probably because other devtools were
open on the same runtime), the REPL will display two buttons, one to try
to reopen the connection, and another one to kill Emacs buffers using
this connection (the REPL buffer, inspectors & debuggers).


File: Indium.info,  Node: Code evaluation & context,  Prev: Using the REPL,  Up: The REPL

1.3.3 Code evaluation & context
-------------------------------

When evaluating code in the REPL, Indium will always run the code on the
current execution context.

This means that while debugging, code execution will happen in the
context of the current stack frame, and will be able to access local
variables from the stack, etc.


File: Indium.info,  Node: Interaction in JS buffers,  Next: The stepping debugger,  Prev: The REPL,  Up: Table of contents

1.4 Interaction in JS buffers
=============================

Indium comes with a minor mode called ‘indium-interaction-mode’ for
interactive programming.  To enable it in all JavaScript buffers, add
something like the following to your Emacs configuration:

     (require 'indium)
     (add-hook 'js-mode-hook #'indium-interaction-mode)

When ‘indium-interaction-mode’ is on, you can evaluate code, inspect
objects and add or remove breakpoints from your buffers.

* Menu:

* Evaluating and inspecting::
* Switching to the REPL buffer::
* Adding and removing breakpoints::


File: Indium.info,  Node: Evaluating and inspecting,  Next: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.1 Evaluating and inspecting
-------------------------------

Here’s a list of available keybindings:

   - ‘C-x C-e’: Evaluate the JavaScript expression preceding the point.

   - ‘C-M-x’: Evaluate the innermost function enclosing the point.

   - ‘C-c M-i’: Inspect the result of the evaluation of an expression
     (see *note The inspector: 20.).

   - ‘C-c M-:’: Prompt for an expression to evaluate and inspect.

   - ‘M-x indium-eval-buffer’: Evaluate the entire buffer.

   - ‘M-x indium-eval-region’: Evaluate the current region.


File: Indium.info,  Node: Switching to the REPL buffer,  Next: Adding and removing breakpoints,  Prev: Evaluating and inspecting,  Up: Interaction in JS buffers

1.4.2 Switching to the REPL buffer
----------------------------------

Press ‘C-c C-z’ from any buffer with ‘indium-interaction-mode’ turned on
to switch back to the REPL buffer (see *note The REPL: 1d.).


File: Indium.info,  Node: Adding and removing breakpoints,  Prev: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.3 Adding and removing breakpoints
-------------------------------------

You need to first make sure that Indium is set up correctly to use local
files (see *note General configuration: 12.).

   - ‘C-c b b’: Add a breakpoint

   - ‘C-c b c’: Add a conditional breakpoint

   - ‘C-c b k’: Remove a breakpoint

   - ‘C-c b t’: Toggle a breakpoint

   - ‘C-c b K’: Remove all breakpoints from the current buffer

   - ‘C-c b e’: Edit condition of a breakpoint

   - ‘C-c b l’: List all breakpoints and easily jump to any breakpoint

   - ‘C-c b d’: Deactivate all breakpoints (the runtime won’t pause when
     hitting a breakpoint)

   - ‘C-c b a’: Activate all breakpoints (it has no effect if
     breakpoints have not been deactivated)

The left fringe or margin can also be clicked to add or remove
breakpoints.

Once a breakpoint is set, execution will stop when a breakpoint is hit,
and the Indium debugger pops up (see *note The stepping debugger: 2b.).

Since Indium 0.7, breakpoints are supported in source files with an
associated sourcemap, see *note Using sourcemaps: 14.

     Note: Breakpoints are persistent: if the connection is closed, when
     a new connection is made Indium will attempt to add back all
     breakpoints.


File: Indium.info,  Node: The stepping debugger,  Next: The inspector,  Prev: Interaction in JS buffers,  Up: Table of contents

1.5 The stepping debugger
=========================

* Menu:

* Using sourcemaps::
* Blackboxing scripts::


File: Indium.info,  Node: Using sourcemaps,  Next: Blackboxing scripts,  Up: The stepping debugger

1.5.1 Using sourcemaps
----------------------

Since version 0.7, Indium uses sourcemap files by default.

For sourcemaps to work properly with Chrome/Chromium, make sure that a
workspace is correctly set (see *note Getting up and running: d.).

     Warning: If your project uses sourcemaps, we advise you to use
     ‘js-mode’ with ‘js2-minor-mode’ instead of ‘js2-mode’.  ‘js2-mode’
     can be extremely slow at parsing large files (like compiled
     JavaScript files) that the debugger might open if a stack frame
     source is not source-mapped.  This can happen for instance when
     using Webpack.

* Menu:

* Overriding sourcemap paths::
* Setting a different remote root (NodeJS): Setting a different remote root NodeJS.


File: Indium.info,  Node: Overriding sourcemap paths,  Next: Setting a different remote root NodeJS,  Up: Using sourcemaps

1.5.1.1 Overriding sourcemap paths
..................................

Some sourcemaps cannot be used as is and need path rewriting to map to
locations on disks.

Indium provides the configuration option ‘sourceMapPathOverrides’ for
providing custom sourcemap paths.

The default mapping works well for Webpack projects:

     {
       "webpack:///./~/": "${root}/node_modules/",
       "webpack:///./":   "${root}/",
       "webpack:///":     "/",
       "webpack:///src/": "${root}/"
     }

Overriding the ‘sourceMapPathOverrides’ option will erase the default
mapping.

     Tip: If sourcemaps do not seem to work, you can see how Indium
     resolves sourcemap paths using ‘M-x indium-list-sourcemap-sources’.


File: Indium.info,  Node: Setting a different remote root NodeJS,  Prev: Overriding sourcemap paths,  Up: Using sourcemaps

1.5.1.2 Setting a different remote root (NodeJS)
................................................

When running a NodeJS application on a remote machine or inside a Docker
container, your application’s root folder path might not correspond to
where their source code is located on your local disk.

In this case, you can tell Indium to replace the ‘root’ path with a
different location using the ‘remoteRoot’ configuration option.

     {

          … “remoteRoot”: “/var/task”

     }

Note that ‘remoteRoot’ can be used together with the ‘root’
configuration option.


File: Indium.info,  Node: Blackboxing scripts,  Prev: Using sourcemaps,  Up: The stepping debugger

1.5.2 Blackboxing scripts
-------------------------

The custom variable ‘indium-debugger-blackbox-regexps’ holds a list of
regular expression of script paths to blackbox when debugging.

Blackboxed scripts are skipped when stepping in the debugger.


File: Indium.info,  Node: The inspector,  Next: Troubleshooting,  Prev: The stepping debugger,  Up: Table of contents

1.6 The inspector
=================

Indium features an object inspector that can be open on any object
reference from a REPL buffer (see *note The REPL: 1d.), the debugger
(see *note The stepping debugger: 2b.), or the result of any evaluation
of JavaScript code (see *note Interaction in JS buffers: 26.).

To inspect the result of the evaluation of an expression, press ‘C-c
M-i’.  An inspector buffer will pop up.  You can also press ‘RET’ or
left click on object links from the REPL buffer.

[Indium-figures/inspector]
* Menu:

* Using the inspector::


File: Indium.info,  Node: Using the inspector,  Up: The inspector

1.6.1 Using the inspector
-------------------------

Here is a list of available keybindings in an inspector buffer:

Keybinding               Description
                         
---------------------------------------------------------------------------------------------------------------
                         
‘RET’                    Follow a link to inspect the object at point
                         
                         
‘l’                      Pop to the previous inspected object
                         
                         
‘g’                      Update the inspector buffer
                         
                         
‘n’ or ‘TAB’             Jump to the next object in the inspector
                         
                         
‘p’ or ‘s-TAB’           Jump to the previous object in the inspector
                         


File: Indium.info,  Node: Troubleshooting,  Prev: The inspector,  Up: Table of contents

1.7 Troubleshooting
===================

If you run into issues with Indium, this document might help you.

* Menu:

* General advice before reporting issues::
* The Indium server doesn’t start::
* Breakpoints are not set (not using sourcemaps): Breakpoints are not set not using sourcemaps.
* Breakpoints and debugging do not work (using sourcemaps): Breakpoints and debugging do not work using sourcemaps.


File: Indium.info,  Node: General advice before reporting issues,  Next: The Indium server doesn’t start,  Up: Troubleshooting

1.7.1 General advice before reporting issues
--------------------------------------------

Issues should be reported on the GitHub issue tracker(1).

1.  If you encounter errors, you can enable ‘debug-on-error’ in Emacs
using ‘M-x toggle-debug-on-error’ and report an issue with the
backtrace.

2.  It is also a good idea to turn on Indium’s log mode with ‘M-: (setq
indium-client-debug t)’, and attach to the issue report the contents of
the ‘*indium-debug-log*’ buffer to help resolve the issue.

Attaching the contents of the ‘*indium-process*’ buffer can help as well
in case an error happens in the server process.

   ---------- Footnotes ----------

   (1) https://github.com/nicolaspetton/indium/issues


File: Indium.info,  Node: The Indium server doesn’t start,  Next: Breakpoints are not set not using sourcemaps,  Prev: General advice before reporting issues,  Up: Troubleshooting

1.7.2 The Indium server doesn’t start
-------------------------------------

First, make sure that ‘indium’ is installed as documented in the *note
The Indium server: 7. section.

If you encounter the error:

     "error in process filter: Indium server process error: env: node: No such file or directory"

Chances are that ‘node’ is not in Emacs’ ‘exec-path’.  In this case, you
can fix it by appending the correct directory to ‘exec-path’, or use the
exec-path-from-shell(1) package:

     (require 'exec-path-from-shell)
     (exec-path-from-shell-initialize)

   ---------- Footnotes ----------

   (1) https://melpa.org/#/exec-path-from-shell


File: Indium.info,  Node: Breakpoints are not set not using sourcemaps,  Next: Breakpoints and debugging do not work using sourcemaps,  Prev: The Indium server doesn’t start,  Up: Troubleshooting

1.7.3 Breakpoints are not set (not using sourcemaps)
----------------------------------------------------

If breakpoints do not work, chances are that the project is not
configured correctly.

     Note: Indium needs to know how to map script source urls to files
     on disk.  It uses the ‘root’ (alias ‘webRoot’) configuration option
     as the base path, as described in the *note General configuration:
     12. page.

Indium provides a command ‘indium-list-script-sources’ to list all
scripts parsed by the backend, displaying their sources mapped to files
on disk.  Check that the file where you’re trying to add a breakpoint is
listed.


File: Indium.info,  Node: Breakpoints and debugging do not work using sourcemaps,  Prev: Breakpoints are not set not using sourcemaps,  Up: Troubleshooting

1.7.4 Breakpoints and debugging do not work (using sourcemaps)
--------------------------------------------------------------

Correctly mapping sourcemaps to file locations can be tedious (see *note
Using sourcemaps: 14.).

Indium provides the command ‘indium-list-sourcemap-sources’ to help
configuring sourcemaps correctly.  This command displays a list of all
sourcemap sources in the runtime as file paths on disk.  Check that your
files are listed there.


File: Indium.info,  Node: Indices and tables,  Prev: Table of contents,  Up: Top

2 Indices and tables
********************

   * genindex

   * modindex

   * search



Tag Table:
Node: Top334
Ref: index doc542
Ref: 0542
Ref: Top-Footnote-12813
Ref: Top-Footnote-22851
Node: Table of contents2899
Ref: index indium2995
Ref: 12995
Ref: index table-of-contents2995
Ref: 22995
Node: Installation3197
Ref: installation doc3294
Ref: 33294
Ref: installation installation3294
Ref: 43294
Ref: Installation-Footnote-13944
Ref: Installation-Footnote-23970
Node: The Indium server4003
Ref: installation server-installation4089
Ref: 74089
Ref: installation the-indium-server4089
Ref: 84089
Node: Using MELPA4327
Ref: installation using-melpa4441
Ref: 94441
Ref: Using MELPA-Footnote-15067
Node: Manual installation5111
Ref: installation manual-installation5199
Ref: a5199
Ref: Manual installation-Footnote-15584
Node: Getting up and running5632
Ref: setup doc5746
Ref: b5746
Ref: setup getting-up-and-running5746
Ref: c5746
Ref: setup setup5746
Ref: d5746
Node: Project configuration6015
Ref: setup configuration-file6125
Ref: e6125
Ref: setup project-configuration6125
Ref: f6125
Node: General configuration6644
Ref: setup general-configuration6800
Ref: 126800
Ref: setup id16800
Ref: 136800
Node: Chrome/Chromium configuration options7547
Ref: setup chrome-chromium-configuration-options7710
Ref: 157710
Ref: setup chrome-configuration7710
Ref: 117710
Node: NodeJS configuration options8272
Ref: setup nodejs-configuration8429
Ref: 108429
Ref: setup nodejs-configuration-options8429
Ref: 168429
Node: Starting Indium9520
Ref: setup id29659
Ref: 189659
Ref: setup starting-indium9659
Ref: 199659
Node: NodeJS requirements10064
Ref: setup id310203
Ref: 1a10203
Ref: setup nodejs-requirements10203
Ref: 610203
Ref: NodeJS requirements-Footnote-110886
Ref: NodeJS requirements-Footnote-210928
Node: Chrome/Chromium requirements10984
Ref: setup chrome-chromium-requirements11099
Ref: 1b11099
Ref: setup chrome-requirements11099
Ref: 511099
Node: The REPL11860
Ref: repl doc11987
Ref: 1c11987
Ref: repl repl11987
Ref: 1d11987
Ref: repl the-repl11987
Ref: 1e11987
Node: Starting a REPL12093
Ref: repl starting-a-repl12176
Ref: 1f12176
Node: Using the REPL12639
Ref: repl using-the-repl12756
Ref: 2112756
Node: Keybindings12863
Ref: repl keybindings12967
Ref: 2212967
Node: Reconnecting from the REPL buffer13069
Ref: repl reconnecting-from-the-repl-buffer13173
Ref: 2313173
Node: Code evaluation & context13532
Ref: repl code-evaluation-context13625
Ref: 2413625
Node: Interaction in JS buffers13959
Ref: code-evaluation doc14085
Ref: 2514085
Ref: code-evaluation interaction14085
Ref: 2614085
Ref: code-evaluation interaction-in-js-buffers14085
Ref: 2714085
Node: Evaluating and inspecting14667
Ref: code-evaluation evaluating-and-inspecting14791
Ref: 2814791
Node: Switching to the REPL buffer15360
Ref: code-evaluation switching-to-the-repl-buffer15524
Ref: 2915524
Node: Adding and removing breakpoints15738
Ref: code-evaluation adding-and-removing-breakpoints15868
Ref: 2a15868
Node: The stepping debugger17152
Ref: debugger doc17283
Ref: 2c17283
Ref: debugger debugger17283
Ref: 2b17283
Ref: debugger the-stepping-debugger17283
Ref: 2d17283
Node: Using sourcemaps17391
Ref: debugger sourcemaps17493
Ref: 1417493
Ref: debugger using-sourcemaps17493
Ref: 2e17493
Node: Overriding sourcemap paths18244
Ref: debugger overriding-sourcemap-paths18370
Ref: 2f18370
Ref: debugger webpack18370
Ref: 3018370
Node: Setting a different remote root NodeJS19098
Ref: debugger remoteroot19224
Ref: 1719224
Ref: debugger setting-a-different-remote-root-nodejs19224
Ref: 3119224
Node: Blackboxing scripts19822
Ref: debugger blackboxing-scripts19924
Ref: 3219924
Node: The inspector20179
Ref: inspector doc20300
Ref: 3320300
Ref: inspector inspector20300
Ref: 2020300
Ref: inspector the-inspector20300
Ref: 3420300
Node: Using the inspector20866
Ref: inspector using-the-inspector20935
Ref: 3520935
Node: Troubleshooting21838
Ref: troubleshooting doc21929
Ref: 3621929
Ref: troubleshooting troubleshooting21929
Ref: 3721929
Node: General advice before reporting issues22340
Ref: troubleshooting general-advice-before-reporting-issues22472
Ref: 3822472
Ref: General advice before reporting issues-Footnote-123151
Node: The Indium server doesn’t start23206
Ref: troubleshooting the-indium-server-doesn-t-start23391
Ref: 3923391
Ref: The Indium server doesn’t start-Footnote-124012
Node: Breakpoints are not set not using sourcemaps24061
Ref: troubleshooting breakpoints-are-not-set-not-using-sourcemaps24262
Ref: 3a24262
Node: Breakpoints and debugging do not work using sourcemaps24923
Ref: troubleshooting breakpoints-and-debugging-do-not-work-using-sourcemaps25082
Ref: 3b25082
Node: Indices and tables25548
Ref: index indices-and-tables25632
Ref: 3c25632

End Tag Table


Local Variables:
coding: utf-8
End:
